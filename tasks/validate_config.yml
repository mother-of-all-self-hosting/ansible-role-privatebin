# SPDX-FileCopyrightText: 2023 Slavi Pantaleev
# SPDX-FileCopyrightText: 2025 Suguru Hirahara
#
# SPDX-License-Identifier: AGPL-3.0-or-later

---
- name: Fail if required PrivateBin settings not defined
  ansible.builtin.fail:
    msg: >-
      You need to define a required configuration setting (`{{ item }}`).
  when: "lookup('vars', item, default='') | string | length == 0"
  with_items:
    - privatebin_uid
    - privatebin_gid
    - privatebin_hostname
    - privatebin_path_prefix
    - privatebin_container_network

- name: Fail if PrivateBin default display mode is invalid
  ansible.builtin.fail:
    msg: >-
      privatebin_config_main_defaultformatter must be 'plaintext', 'syntaxhighlighting', or 'markdown'
  when: "privatebin_config_main_defaultformatter not in ['plaintext', 'syntaxhighlighting', 'markdown']"

- name: Fail if PrivateBin syntax highlighting theme is invalid
  ansible.builtin.fail:
    msg: >-
      privatebin_config_main_syntaxhighlightingtheme must be 'desert', 'doxy', 'prettify', 'sons-of-obsidian', or 'sunburst'
  when: "privatebin_config_main_syntaxhighlightingtheme not in ['desert', 'doxy', 'prettify', 'sons-of-obsidian', 'sunburst']"

- name: Fail if PrivateBin defalult template is invalid
  ansible.builtin.fail:
    msg: >-
      privatebin_config_main_template must be 'bootstrap', 'bootstrap-page', 'bootstrap-dark', 'bootstrap-dark-page', 'bootstrap-compact', 'bootstrap-compact-page', or 'bootstrap5'
  when: "privatebin_config_main_template not in ['bootstrap', 'bootstrap-page', 'bootstrap-dark', 'bootstrap-dark-page', 'bootstrap-compact', 'bootstrap-compact-page', 'bootstrap5']"

- name: Fail if PrivateBin identicon generator is invalid
  ansible.builtin.fail:
    msg: >-
      privatebin_config_main_icon must be 'none', 'identicon', 'jdenticon', or 'vizhash'
  when: "privatebin_config_main_icon not in ['none', 'identicon', 'jdenticon', 'vizhash']"

- name: Fail if PrivateBin compression algorithm is invalid
  ansible.builtin.fail:
    msg: >-
      privatebin_config_main_compression must be 'none' or 'zlib'
  when: "privatebin_config_main_compression not in ['none', 'zlib']"

- name: Fail if PrivateBin data provider invalid
  ansible.builtin.fail:
    msg: >-
      privatebin_config_model must be 'Filesystem', 'GoogleCloudStorage', 'GoogleCloudStorage', 'SQLite', 'PostgreSQL', or 'S3'
  when: "privatebin_config_model not in ['Filesystem', 'GoogleCloudStorage', 'GoogleCloudStorage', 'SQLite', 'PostgreSQL', 'S3']"

- name: Fail if required PrivateBin + GoogleCloudStorage integration settings not defined
  ansible.builtin.fail:
    msg: >-
      You need to define a required configuration setting (`{{ item }}`) when `privatebin_config_model` is `GoogleCloudStorage`
  when: "privatebin_config_model == 'GoogleCloudStorage' and lookup('vars', item, default='') | string | length == 0"
  with_items:
    - privatebin_config_model_gcs_bucket
    - privatebin_config_model_gcs_prefix

- name: Fail if required PrivateBin + MySQL integration settings not defined
  ansible.builtin.fail:
    msg: >-
      You need to define a required configuration setting (`{{ item }}`) when `privatebin_config_model` is `MySQL`
  when: "privatebin_config_model == 'MySQL' and lookup('vars', item, default='') | string | length == 0"
  with_items:
    - privatebin_database_mysql_hostname
    - privatebin_database_mysql_password

- name: Fail if required PrivateBin + PostgreSQL integration settings not defined
  ansible.builtin.fail:
    msg: >-
      You need to define a required configuration setting (`{{ item }}`) when `privatebin_config_model` is `PostgreSQL`
  when: "privatebin_config_model == 'PostgreSQL' and lookup('vars', item, default='') | string | length == 0"
  with_items:
    - privatebin_database_postgres_hostname
    - privatebin_database_postgres_password

- name: Fail if required PrivateBin + AWS S3 integration settings not defined
  ansible.builtin.fail:
    msg: >-
      You need to define a required configuration setting (`{{ item }}`) when `privatebin_config_model` is `S3`
  when: "privatebin_config_model == 'S3' and lookup('vars', item, default='') | string | length == 0"
  with_items:
    - privatebin_config_model_s3_bucket
    - privatebin_config_model_s3_accesskey
    - privatebin_config_model_s3_secretkey

- name: Run if Traefik is enabled
  when: privatebin_container_labels_traefik_enabled | bool
  block:
    - name: Fail if Traefik settings required for PrivateBin are not defined
      ansible.builtin.fail:
        msg: >-
          You need to define a required configuration setting (`{{ item }}`).
      when: "lookup('vars', item, default='') | string | length == 0"
      with_items:
        - privatebin_container_labels_traefik_hostname
        - privatebin_container_labels_traefik_path_prefix

    # We ensure it doesn't end with a slash, because we handle both (slash and no-slash).
    # Knowing that `privatebin_container_labels_traefik_path_prefix` does not end with a slash
    # ensures we know how to set these routes up without having to do "does it end with a slash" checks elsewhere.
    - name: Fail if privatebin_container_labels_traefik_path_prefix ends with a slash
      ansible.builtin.fail:
        msg: >-
          privatebin_container_labels_traefik_path_prefix (`{{ privatebin_container_labels_traefik_path_prefix }}`) must either be `/` or not end with a slash (e.g. `/privatebin`).
      when: "privatebin_container_labels_traefik_path_prefix != '/' and privatebin_container_labels_traefik_path_prefix[-1] == '/'"
